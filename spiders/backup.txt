import scrapy
from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
# REMOVE \n \r and <script>
# import w3lib
# from w3lib.html import replace_escape_chars
# TEST TO INCREMENT PageNumber
# from scrapy.spider import BaseSpider
# from scrapy.selector import Selector
# from scrapy.exceptions import CloseSpider
# from scrapy.http import Request
# from tcgplayer1.items import Tcgplayer1Item
import w3lib.encoding
w3lib.encoding.http_content_type_encoding("Content-Type: text/html; charset=ISO-8859-4")

class CordisSpider(scrapy.Spider):
    name = "cordis"
    # Working Dynamic URLS rule
    start_urls = ['http://cordis.europa.eu/project/rcn/%d_en.html' %(n) for n in range(210216, 210217)] #range(1, infinite)

    #def start_requests(self):
        #urls = [
        #   'http://cordis.europa.eu/project/rcn/195551_en.html',
            #'http://cordis.europa.eu/project/rcn/210216_en.html',
            #'http://cordis.europa.eu/project/rcn/210246_en.html',
            #'http://cordis.europa.eu/project/rcn/100_en.html',
            #'http://cordis.europa.eu/project/rcn/101_en.html',
            #'http://cordis.europa.eu/project/rcn/102_en.html',
            #'http://cordis.europa.eu/project/rcn/103_en.html',
            #'http://cordis.europa.eu/project/rcn/104_en.html',
            #'http://cordis.europa.eu/project/rcn/105_en.html',
            #'http://cordis.europa.eu/project/rcn/106_en.html',
            #'http://cordis.europa.eu/project/rcn/107_en.html',
            #'http://cordis.europa.eu/project/rcn/108_en.html',
            #'http://cordis.europa.eu/project/rcn/109_en.html',
            #'http://cordis.europa.eu/project/rcn/110_en.html',
            #'http://cordis.europa.eu/project/rcn/111_en.html',
            #'http://cordis.europa.eu/project/rcn/112_en.html',
            #'http://cordis.europa.eu/project/rcn/113_en.html',
            #'http://cordis.europa.eu/project/rcn/114_en.html',
            #'http://cordis.europa.eu/project/rcn/115_en.html',
            #'http://cordis.europa.eu/project/rcn/116_en.html',
            #'http://cordis.europa.eu/project/rcn/117_en.html',
            #'http://cordis.europa.eu/project/rcn/118_en.html',
            #'http://cordis.europa.eu/project/rcn/119_en.html',
            #'http://cordis.europa.eu/project/rcn/120_en.html',
            #'http://cordis.europa.eu/project/rcn/121_en.html',
            #'http://cordis.europa.eu/project/rcn/122_en.html',
            #'http://cordis.europa.eu/project/rcn/123_en.html',
            #'http://cordis.europa.eu/project/rcn/124_en.html',
            #'http://cordis.europa.eu/project/rcn/125_en.html',
            #'http://cordis.europa.eu/project/rcn/126_en.html',
            #'http://cordis.europa.eu/project/rcn/127_en.html',
            #'http://cordis.europa.eu/project/rcn/128_en.html',
            #'http://cordis.europa.eu/project/rcn/129_en.html',
            #'http://cordis.europa.eu/project/rcn/130_en.html',
        #   'http://cordis.europa.eu/project/rcn/195521_en.html',
        #]
        #for url in urls:
            #yield scrapy.Request(url=url, callback=self.parse)

    #def parse(self, response):
        #page = response.url.split("/")[-2]
        #filename = 'cordis-%s.html' % page
        #with open(filename, 'wb') as f:
        #    f.write(response.body)
        #self.log('Saved file %s' % filename)

    def parse(self, response):
        for header in response.css('div.header'):
            yield {
                'TitleACRheader': header.css('h1::text').extract_first(),
                'Project_ID': header.css('b::text').extract(),
            }
        for project in response.css('div.project'):
            yield {
                'Programme': project.css('a::text').extract_first(),
                #'Programme': project.css('a::text').re('[.a-z]+'),
                'title_full': project.css('h2::text').extract_first(),
            }
        # for projdates in response.css('div.projdates'):
        #     yield {
        #         'Date': projdates.css('div::text').extract(),
        #     }
        # for projdet in response.css('div.projdet'):
        #     yield {
        #         'Contribution': projdet.css('div::text').extract(),
        #     }
        for objective in response.css('div.objective'):
            yield {
                'Technology_Description': objective.css('p::text').extract_first(),
            }
        for coordinator in response.css('div.coordinator'):
            yield {
                'Coordinator': coordinator.css('div.name::text').extract_first(),
                'Country': coordinator.css('div.country::text').extract_first(),
                'Contribution':coordinator.css('p.partipant-contribution::text').extract_first(),
                'Profil': coordinator.css('div.contact::text').extract(),
            }
        for participant in response.css('div.participant'):
            yield {
                'Name': participant.css('div.name::text').extract(),
                'Country': participant.css('div.country::text').extract(),
                'Activity': participant.css('div.contact::text').extract(),
                #'Contribution': participant.css('p.participant-contribution::text').extract(), OR //*[@id="dynamiccontent"]/div[8]/div[1]/div[2]/p[1]/text()
            }

        # XPATH need to clean \n \t etc...

        for euproject in response.xpath('//*[@id="container-pack"]'):
            yield {
                'Project_ACR': euproject.xpath('//*[@id="dynamiccontent"]/div[1]/h1/text()').extract(),
                'Project_Title': euproject.xpath('//*[@id="dynamiccontent"]/h2/text()').extract(),
                #'Project_ID': euproject.xpath(' //*[@id="dynamiccontent"]/div[1]/text()').extract(),
                #'From': euproject.xpath('//*[@id="dynamiccontent"]/div[2]/text()[2]').extract(),
                #'To': euproject.xpath('//*[@id="dynamiccontent"]/div[2]/text()[3]').extract(),
                'Total_Cost': euproject.xpath('//*[@id="dynamiccontent"]/div[3]/div/div[1]/div[1]/text()').extract(),
                'EU_Contribution': euproject.xpath('//*[@id="dynamiccontent"]/div[3]/div/div[1]/div[2]/text()').extract(),
                'Coordinated_in': euproject.xpath('//*[@id="dynamiccontent"]/div[3]/div/div[1]/div[3]/text()').extract(),
                'Topic(s)': euproject.xpath('//*[@id="dynamiccontent"]/div[3]/div/div[2]/div[1]/a/text()').extract(),
                'Call_for_Proposal': euproject.xpath('//*[@id="dynamiccontent"]/div[3]/div/div[2]/div[2]/text()').extract(),
                'Funding_scheme': euproject.xpath('//*[@id="dynamiccontent"]/div[3]/div/div[2]/div[3]/text()').extract(),
                # Normalize Space
                #'Funding': euproject.xpath('normalize-space(.//*[@id="dynamiccontent"]/div[3]/div/div[2]/div[3]/text())').extract(),
                #'Project_Title_no_NewLine': euproject.xpath('normalize-space(.//*[@id="dynamiccontent"]/div[1]/text())').extract(),
                # STRIP
                # map(unicode.strip, div.xpath('.//p[@class="class-name"]/text()').extract())
                'Project_ID': map(unicode.strip, euproject.xpath('.//*[@id="dynamiccontent"]/div[1]/text()').re('[.0-9]+')),
                'To': euproject.xpath('normalize-space(.//*[@id="dynamiccontent"]/div[2]/text()[3])').extract(),
                'From': euproject.xpath('normalize-space(.//*[@id="dynamiccontent"]/div[2]/text()[2])').extract(),
                #'Partners': euproject.xpath('//*[@id="dynamiccontent"]/div[8]/div[1]/div[1]/div[1]/text()').extract_first(),
                'Partners': euproject.css('.name').xpath('text()').extract(),
                'Country': euproject.css('.country').xpath('text()').extract(),
                'Activity': euproject.css('.contact').xpath('text()').extract(),
                #trans_table = {ord(c): None for c in u'\r\n\t'}
                #'ID_strip': ' '.join(s.strip().translate(trans_table) for s in euproject.xpath('//*[@id="dynamiccontent"]/div[1]/text()').extract()),
                # Not working
                #'Tech': euproject.xpath('//*[@id="dynamiccontent"]/div[4]/div[2]/div/p/text()').extract(),
            }

        #while "\n" in some_list: some_list.remove("\n")
        #string = string.replace("\r","")
        #string = string.replace("\n","")
